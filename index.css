/* || Layout */

main {
    margin: 0 auto;
    max-width: 860px;
    padding: 50px;
}

section {
    max-width: 620px;

    /* margin is to make space for the fixed header */
    margin-left: 260px;
}

header {
    /* these 3 lines are key for the sticky left sidebar layout */
    position: fixed;
    float: left;
    width: 200px;

    display: flex;
    flex-direction: column;
    align-items: center;

    /* enforce height so content expands to fill (bc flex) placing footer at bottom.
     * subtract some to offset padding above from main and some extra buffer as we're not applying padding-bottom on footer */
    height: calc(100% - 80px);
}

.header-content {
    /* so the content expands (header-content is a flex child of header) */
    flex: 1 0 auto;

    /* give this container it's own flex to horizontally align items */ 
    display: flex;
    flex-direction: column;
    align-items: center;
}

.header-footer {
    /* doesn't fill container */
    flex-shrink: 0;

    font-size: 12px;
    padding-top: 10px;
    margin-bottom: 0px;
}

.profile {
    object-fit: cover;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    display: block;
}

header ul {
    list-style-type: none;
    padding-left: 0px;
    text-transform: lowercase;
    font-size: 20px;
    color: rgb(89, 0, 255);
}

header ul li {
    margin: 10px 0px;
}








/* || General styling */

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    margin: 0;
    --text-color: rgb(61, 61, 61);
}

section h2 {
    font-size: 1.3em;
}

p  {
    line-height: 1.5;
    color: var(--text-color);
}

p a, ul a, ol a {
    text-decoration: none;
    color: #246FC8;
}

p a:hover, ul a:hover, ol a:hover {
    background-image: linear-gradient(to top, #ffe7e2 30%,transparent 30%);
}

.button {
    color: white;
    display: inline-block;
    background-color: #ec9791; /* ffe7e2 */
    padding: 10px;
    border-radius: 10px;
    box-shadow: 2px 5px 5px -4px rgba(0, 0, 0, .4);
    transition: all .2s;
}

.button:hover {
    background-color: #f5c1b8;
    background-image: none;
}

.button:active {
    transform: translate(0, 5px);
    box-shadow: 2px 5px 5px -6px rgba(0, 0, 0, .4);
    outline:none;
}





/* || Cards || */

.card {
    display: inline-block;
    background-image: url(img/rose.jpg);
    width: 100%;
    height: 100%;
    background-position: center;
    background-size: cover;

    display: flex;
    justify-content: center;
    align-items: center;
}

/* make cards square even on resize
 * padding is based off of parent's *width* so when we resize and the width of card 
 * is resized (by default bc width=100%), padding-top is also resized by the same amount.
 * ::before is a child of .card so its padding-top expands the size of .card. If we don't specify a
 * height for card then this expansion is exactly equal to its width (or another ratio if you
 * specify a different % for padding-top). Of course if we started adding content
 * to card this content would be stacked below the padding top. One way to avoid this is to apply
 * display: flex and center content.
*/
.card::before {
    content: "";
    display: block; /* need it so padding is observed (padding ignored for inline elems) */
    padding-top: 100%;
}

.card-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
}

.card-grid > .card {
    border-radius: 5px;
    margin: 5px;

    /* max-height means these won't be squares but better for mobile */
    max-height: 150px;

    /* 1 = (grow) all even space, 120px = min width before wrapping */
    flex: 1 0 120px;
}

.stack {
    border-radius: 5px;
    margin: 10px 0px;

    /* max-height means these won't be squares but better for mobile */
    max-height: 200px;
}

.card-link  {
    color: white;
    font-weight: 500;
    font-size: 25px;
    text-shadow: 1px 2px 12px rgba(0, 0, 0, 1),
                 1px 1px 1px rgba(0, 0, 0, 1);
    height: 35px;
}

.card-link:hover {
    background-image: linear-gradient(to top, #ffe7e2 10%,transparent 10%);
}

.no-overflow {
    width: 100%;
    overflow: hidden;
    display: inline-block;
}

.enlarge-on-hover {
    max-height: 200px;
    transition: transform .2s;
}

.enlarge-on-hover:hover {
    transform: scale(1.1);
}

#knits-card {
    background-image: url(img/yarn.jpg);
}

#wood-card {
    background-image: url(img/woodwork.jpg);
}

#draw-card {
    background-image: url(img/drawing.jpg);
}

.card .button {
    box-shadow: 2px 5px 5px -2px rgba(0, 0, 0, .8);
}





/* || responsive grid of square images || */

.grid-container {
    display: flex;
    justify-content: space-evenly;
    flex-wrap: wrap;
}

.grid-item {
    /* need minimum 30% space or wrap */
    flex: 1 0 30%;
    background-image: url(img/rose.jpg);
    width: 100%;
    margin: 5px;
    background-position: center;
    background-size: cover;

    /* position: relative as anchor for abs position of caption */
    position: relative;
}

/* make each grid item square (see explanation in cards section above) */
.grid-item::before {
    content: "";
    display: block;
    padding-top: 100%;
}

.grid-item-caption {
    position: absolute;
    bottom: 0px;
    left: 0px;

    padding: 5px;
    margin: 5px;

    background-color: rgba(255, 255, 255, .5);
    
    opacity: 0;
    transition: opacity .5s;
}

.grid-item:hover .grid-item-caption {
    opacity: 1;
}

.grid-item-caption h2 {
    color: var(--text-color);
    font-size: 12px;
    font-style: italic;
    margin: 0;
}

.grid-item-caption p {
    font-size: 12px;
    margin: 0;
}






/* || Modal || */

#modal {
    position: fixed;
    z-index: 1;
    top: 0px; right: 0px; bottom: 0px; left: 0px;

    display: none; /* changed to flex in JS when opened */
    justify-content: center;
    align-items: center;

    /* we make modal overlay focusable so we can tab within, don't want to show the overlay outline */
    outline: none;

    background-color: rgba(0, 0, 0, .6);
}

/* content is image + caption */
#modal-content-container {
    /* add the following to constrain image zoom to initial viewport */
    /* display: flex;
    flex-direction: column;
    align-items: center; */

    /* this means entire image + caption group scrolls */
    width: 500px;
    max-height: 95vh;
    overflow-y: auto;
}

#modal-image-container {
    /* 
    sticky position would keep image in place while caption scrolls tho doesn't seem great
    position: sticky;
    top: 10px; */
    display: flex;
    align-items: center;
    justify-content: center;

    /* for zooming, else would overflow to modal-content-container */
    max-width: 100%;
    max-height: 80vh;
    overflow: hidden;
    position: relative;
}

#modal-image {
    max-width: 100%;
    max-height: 80vh;
}

.arrow-button {
    font-size: 20px;
    background-color: rgba(0, 0, 0, .2);
    border-radius: 50%;
    color: white;
    padding: 10px;
    padding-top: 8px;
    margin: 10px;
    display: inline-block;
    width: 20px;
    height: 21px;
    text-align: center;
    cursor: pointer;
    user-select: none;
}

.arrow-button:hover {
    background-color: rgba(0, 0, 0, .3);
}

#modal-exit {
    position: fixed;
    top: 10px;
    right: 10px;
}

/* || Zoom */

#modal-image-container:hover .zoom-container {
    opacity: 1;
}

.zoom-container {
    background: rgba(0, 0, 0, .6);
    width: 200px;
    border-radius: 2px;
    display: flex;
    align-items: center;
    justify-content: space-around;
    user-select: none;
    position: absolute;
    bottom: 10px;
    opacity: 0;
    transition: opacity .5s ease .5s;
}

#zoom-input {
    -webkit-appearance: none;

    width: 120px;
    height: 50px;
    background: transparent;
}

#zoom-input:active {
    outline: none;
}

#zoom-input::-webkit-slider-runnable-track {
    height: 2px;
    border: none;
    background: rgba(255, 255, 255, .8);
}

#zoom-input::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    margin-top: -9px;
    background: white;
}

.plus-minus {
    color: white;
    font-size: 30px;
    font-weight: 200;
    padding: 12px;
    padding-top: 8px;
}

#modal-caption {
    margin-top: 6px;
    padding-left: 4px;
    color: white;
    overflow-y: auto;
}

#modal-caption h2 {
    font-size: 15px;
    margin: 0;
    font-style: italic;
}

#modal-caption p {
    font-size: 14px;
    color: white;
    margin: 0;
}


/* || Responsive */

@media print, screen and (max-width: 850px) {
    /* Same layout but section is resizing to the point that the grid elems are a bit small */
    .grid-item {
        flex-basis: 40%;
    }
}

@media print, screen and (max-width: 750px) {
    /*
    Dismantle the sidebar layout.
    */
    main {
        /* before: max-width: 860px, padding: 50px */
        width: auto;
        padding-top: 10px;
    }

    header,section {
        /* before: float: left, position: fiex, fixed widths */
        float: none;
        position: static;
        width: auto;
    }

    section {
        /* before: margin left to avoid sidebar, max width */
        margin-left: 0px;
        max-width: none;
    }

    header ul li {
        /* new! scrunch our sidebar a bit */
        display: inline;
        word-spacing: 10px;
    }

    .grid-item {
        /* more room for our grid - back to columns of 3! */
        flex-basis: 30%;
    }
}

@media print, screen and (max-width: 600px) {
    .grid-item {
        flex-basis: 40%;
    }
}

@media print, screen and (max-width: 420px) {
    main {
        /* Make padding less if mobile (small screen) */
        padding: 10px 20px 20px 20px;
    }
}